// This file was generated by git.sr.ht/~nelsam/hel.  Do not
// edit this code by hand unless you *really* know what you're
// doing.  Expect any changes made manually to be overwritten
// the next time hel regenerates this file.

package component_tests_test

import (
	"context"

	"code.cloudfoundry.org/go-loggregator/v9/rpc/loggregator_v2"
)

type mockMetronIngressServer struct {
	loggregator_v2.UnimplementedIngressServer

	SenderCalled chan bool
	SenderInput  struct {
		Arg0 chan loggregator_v2.Ingress_SenderServer
	}
	SenderOutput struct {
		Ret0 chan error
	}
	BatchSenderCalled chan bool
	BatchSenderInput  struct {
		Arg0 chan loggregator_v2.Ingress_BatchSenderServer
	}
	BatchSenderOutput struct {
		Ret0 chan error
	}
	SendCalled chan bool
	SendInput  struct {
		Arg0 chan context.Context
		Arg1 chan *loggregator_v2.EnvelopeBatch
	}
	SendOutput struct {
		Ret0 chan *loggregator_v2.SendResponse
		Ret1 chan error
	}
}

func newMockMetronIngressServer() *mockMetronIngressServer {
	m := &mockMetronIngressServer{}
	m.SenderCalled = make(chan bool, 100)
	m.SenderInput.Arg0 = make(chan loggregator_v2.Ingress_SenderServer, 100)
	m.SenderOutput.Ret0 = make(chan error, 100)
	m.BatchSenderCalled = make(chan bool, 100)
	m.BatchSenderInput.Arg0 = make(chan loggregator_v2.Ingress_BatchSenderServer, 100)
	m.BatchSenderOutput.Ret0 = make(chan error, 100)
	m.SendCalled = make(chan bool, 100)
	m.SendInput.Arg0 = make(chan context.Context, 100)
	m.SendInput.Arg1 = make(chan *loggregator_v2.EnvelopeBatch, 100)
	m.SendOutput.Ret0 = make(chan *loggregator_v2.SendResponse, 100)
	m.SendOutput.Ret1 = make(chan error, 100)
	return m
}
func (m *mockMetronIngressServer) Sender(arg0 loggregator_v2.Ingress_SenderServer) error {
	m.SenderCalled <- true
	m.SenderInput.Arg0 <- arg0
	return <-m.SenderOutput.Ret0
}
func (m *mockMetronIngressServer) BatchSender(arg0 loggregator_v2.Ingress_BatchSenderServer) error {
	m.BatchSenderCalled <- true
	m.BatchSenderInput.Arg0 <- arg0
	return <-m.BatchSenderOutput.Ret0
}
func (m *mockMetronIngressServer) Send(arg0 context.Context, arg1 *loggregator_v2.EnvelopeBatch) (*loggregator_v2.SendResponse, error) {
	m.SendCalled <- true
	m.SendInput.Arg0 <- arg0
	m.SendInput.Arg1 <- arg1
	return <-m.SendOutput.Ret0, <-m.SendOutput.Ret1
}
